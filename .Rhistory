read.delim("Data/Mouse/Processed_Old/KO_10_female/KO_10_female_flirtRigid.mat")
la = read.delim("Data/Mouse/Processed_Old/KO_10_female/KO_10_female_flirtRigid.mat")
la
la[0]
la[1]
la[1,1]
la = read.delim("Data/Mouse/Processed_Old/KO_10_female/KO_10_female_flirtRigid.mat", HEADER=FALSE)
la = read.delim("Data/Mouse/Processed_Old/KO_10_female/KO_10_female_flirtRigid.mat", header=FALSE)
la
flirtAffine = read.delim("Data/Mouse/Processed_Old/KO_10_female/FLIRT/KO_10_female_to_allen_model_warpaffine.mat", header=FALSE)
flirtAffine
RNiftyReg::decomposeAffine(flirtAffine)
data.matrix(flirtAffine)
flirtAffine = read.delim("Data/Mouse/Processed_Old/KO_10_female/FLIRT/KO_10_female_to_allen_model_warpaffine.mat", header=FALSE, sep = "  ")
flirtAffine
flirtAffine = read.delim("Data/Mouse/Processed_Old/KO_10_female/FLIRT/KO_10_female_to_allen_model_warpaffine.mat", header=FALSE, sep = " ")
flirtAffine
flirtAffine[:,:]
flirtAffine[1,1]
flirtAffine[1,[1,2]
flirtAffine[1,[1,2]]
flirtAffine[1,(1,2)]
flirtAffine[1,:]
flirtAffine[1,]
flirtAffine[,1]
flirtAffine[,1 2]
flirtAffine[,(1,3)]
select(flirtAffine, 1, 3)
flirtAffine[,2:3]
2:3
flirtAffine[,c(2,3)]
flirtAffine[,c(1,3,5,7)]
data.matrix(flirtAffine)
flirtAffine
flirtAffine = flirtAffine[,c(1,3,5,7)]
data.matrix(flirtAffine)
RNiftyReg::decomposeAffine(flirtAffine)
flirtAffine
flirtAffine[1,1]
asAffine(flirtAffine)
RNiftyReg::asAffine(flirtAffine)
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine
flirtAffine
flirtAffine = read.delim("Data/Mouse/Processed_Old/KO_10_female/FLIRT/KO_10_female_to_allen_model_warpaffine.mat", header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
RNiftyReg::decomposeAffine(flirtAffine)
Sys.glob
Sys.glob(Data/Mouse/Processed_Old/*)
Sys.glob(Data/Mouse/Processed_Old/**)
Sys.glob(file.path(Data, Mouse, Processed_Old, *))
Sys.glob(file.path(Data, Mouse, Processed_Old))
Sys.glob(file.path(Data, Mouse, Processed_Old))\
Sys.glob(file.path(Data, Mouse, Processed_Old))\
Sys.glob(file.path(Data, Mouse, Processed_Old))
R.home()
getwd
getwd()
getwd()
file.path(getwd(), "Data")
file.path(getwd(), "Data", "mouse", "Processed_Old")
RNiftyReg::decomposeAffine(flirtAffine)
data_folder = file.path(getwd(), "Data", "mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"))
data_folder
file.path(data_folder, "*")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
list.dirs(data_folder)
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
list.dirs(data_folder)
list.dirs(data_folder, recursive = FALSE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
}
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = Sys.glob(file.path(mouse_folder, "FLIRT", "*warpaffine.mat"))
}
affine_path
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = Sys.glob(file.path(mouse_folder, "FLIRT", "*warpaffine.mat"))
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
RNiftyReg::decomposeAffine(flirtAffine)
}
flirtAffine
RNiftyReg::decomposeAffine(flirtAffine)
flirtAffine(0:2,0:2)
flirtAffine[1,1]
flirtAffine[1:3,1:3\]
flirtAffine[1:3,1:3]
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtAffine_decomposed
flirtAffine_decomposed$rotationMatrix
eye(1)
eye(2)
diag(4)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
flirtRigid
flirtAffine_decomposed$rotationMatrix
flirtAffine_decomposed$translation
flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
flirtRigid
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
flirtRigid
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = Sys.glob(file.path(mouse_folder, "FLIRT", "*warpaffine.mat"))
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
subject_folders = list.dirs(data_folder, recursive = FALSE)
# Decompose mouse flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Mouse", "Processed_Old")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
mouse_folders = list.dirs(data_folder, recursive = FALSE)
for (mouse_folder in mouse_folders) {
print(mouse_folder)
affine_path = file.path(mouse_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(mouse_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# loop through files
# decompose affine
# compose rigid transformation matrx out of rotation and translation parameters
# save rigid transformation matrix
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
flirtAffine_decomposed$translation
flirtRigid[1:3, 4]
flirtAffine
flirtAffine[1:3, 4]
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
#flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
#flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
#flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
#flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
#flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
#flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
# Decompose human flirt affine and wrtie flirt rigid as transformation component
data_folder = file.path(getwd(), "Data", "Human", "Processed")
Sys.glob(file.path(data_folder, "*"), dirmark=TRUE)
subject_folders = list.dirs(data_folder, recursive = FALSE)
for (subject_folder in subject_folders) {
print(subject_folder)
affine_path = file.path(subject_folder, "flirtAffine.mat")
flirtAffine = read.delim(affine_path, header=FALSE, sep = " ")
flirtAffine = RNiftyReg::asAffine(data.matrix(flirtAffine[,c(1,3,5,7)]))
flirtAffine_decomposed = RNiftyReg::decomposeAffine(flirtAffine)
flirtRigid = diag(4)
flirtRigid[1:3, 1:3] = flirtAffine_decomposed$rotationMatrix
#flirtRigid[1:3, 4] = flirtAffine_decomposed$translation
flirtRigid[1:3, 4] = flirtAffine[1:3, 4]
write.table(flirtRigid, file=file.path(subject_folder, "flirtRigid.mat"), row.names=FALSE, col.names=FALSE, sep = "  ")
}
